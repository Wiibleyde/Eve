generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model GlobalUserData {
    uuid            String          @id @default(uuid())
    userId          String          @unique
    birthDate       DateTime?       @db.Date
    quizGoodAnswers Int             @default(0)
    quizBadAnswers  Int             @default(0)
    QuizQuestions   QuizQuestions[]
    Quote           Quote[]
    MpThreads       MpThreads[]

    @@index([userId])
}

model Config {
    uuid    String @id @default(uuid())
    key     String
    value   String
    guildId String

    @@unique([key, guildId], name: "unique_key_guildId")
    @@index([guildId])
}

model GuildData {
    uuid                    String          @id @default(uuid())
    guildId                 String          @unique
    debugRoleId             String?
    calendarUrl             String?         @db.MediumText
    calendarMessageId       String?
    CalendarMessageData     BotMessageData? @relation(fields: [CalendarMessageDatauuid], references: [uuid])
    CalendarMessageDatauuid String?

    @@index([guildId])
}

model Quote {
    uuid       String         @id @default(uuid())
    guildId    String
    authorUuid String
    quote      String
    context    String         @default("")
    createdAt  DateTime       @default(now())
    author     GlobalUserData @relation(fields: [authorUuid], references: [uuid], onDelete: Cascade)

    @@index([authorUuid], map: "Quote_authorUuid_fkey")
}

model QuizQuestions {
    uuid         String          @id @default(uuid())
    question     String          @unique @db.VarChar(2048)
    answer       String
    badAnswer1   String
    badAnswer2   String
    badAnswer3   String
    createdAt    DateTime        @default(now())
    authorUuid   String?
    guildId      String
    lastTimeUsed DateTime?
    category     String
    difficulty   String
    author       GlobalUserData? @relation(fields: [authorUuid], references: [uuid], onDelete: Cascade)

    @@index([guildId])
    @@index([authorUuid], map: "QuizQuestions_authorUuid_fkey")
}

model BotMessageData {
    uuid      String      @id @default(uuid())
    guildId   String
    channelId String
    messageId String      @unique
    createdAt DateTime    @default(now())
    GuildData GuildData[]

    @@index([guildId])
}

model MpThreads {
    uuid      String          @id @default(uuid())
    userUuid  String
    user      GlobalUserData? @relation(fields: [userUuid], references: [uuid], onDelete: Cascade)
    threadId  String          @unique
    createdAt DateTime        @default(now())

    @@index([userUuid], map: "MpThreads_userUuid_fkey")
}

model Stream {
    uuid         String  @id @default(uuid())
    guildId      String
    channelId    String
    roleId       String?
    messageId    String?
    twitchUserId String

    @@index([guildId])
}

model LsmsDutyManager {
    uuid          String  @id @default(uuid())
    guildId       String
    channelId     String
    messageId     String?
    dutyRoleId    String?
    onCallRoleId  String?
    logsChannelId String?

    @@index([guildId])
}

model LotoGames {
    uuid                  String        @id @default(uuid())
    name                  String
    isActive              Boolean       @default(true)
    ticketPrice           Int           @default(500)
    cooldownMinutes       Int           @default(0)
    maxTicketsPerPurchase Int?
    createdAt             DateTime      @default(now()) @db.Timestamp(6)
    players               LotoPlayers[] @relation("GamePlayers")
    tickets               LotoTickets[]
    prizes                LotoPrizes[]
}

model LotoPlayers {
    uuid      String        @id @default(uuid())
    gameUuid  String
    name      String
    lastPlay  DateTime      @default(now())
    game      LotoGames     @relation("GamePlayers", fields: [gameUuid], references: [uuid], onDelete: Cascade)
    tickets   LotoTickets[]
    prizesWon LotoPrizes[]  @relation("PrizeWinner")

    @@unique([gameUuid, name], name: "unique_player_name_per_game")
    @@index([gameUuid])
}

model LotoTickets {
    uuid       String      @id @default(uuid())
    playerUuid String
    gameUuid   String
    sellerId   String
    player     LotoPlayers @relation(fields: [playerUuid], references: [uuid], onDelete: Cascade)
    game       LotoGames   @relation(fields: [gameUuid], references: [uuid], onDelete: Cascade)

    @@index([playerUuid], map: "LotoTickets_playerUuid_fkey")
    @@index([gameUuid])
}

model LotoPrizes {
    uuid                String       @id @default(uuid())
    gameUuid            String
    label               String       @db.VarChar(255)
    position            Int
    winnerPlayerUuid    String?
    winningTicketNumber Int?
    drawnAt             DateTime?    @db.Timestamp(6)
    createdAt           DateTime     @default(now()) @db.Timestamp(6)
    updatedAt           DateTime     @updatedAt @db.Timestamp(6)
    game                LotoGames    @relation(fields: [gameUuid], references: [uuid], onDelete: Cascade)
    winnerPlayer        LotoPlayers? @relation("PrizeWinner", fields: [winnerPlayerUuid], references: [uuid], onDelete: SetNull)

    @@unique([gameUuid, position], name: "unique_prize_position")
    @@index([gameUuid])
    @@index([winnerPlayerUuid])
}
